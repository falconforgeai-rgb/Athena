# ==========================================================
#  FalconForgeAI Labs ‚Äî Athena CAP Validation & Dual Commit
#  Version: v3.4 | Maintainer: Athena (Steward)
#  Purpose: Validate CAP payloads ‚Üí Commit to Ledger ‚Üí Push to Zapier
# ==========================================================

name: Athena CAP Validation & Ledger Commit (Dual Sync)

on:
  workflow_dispatch:
    inputs:
      cap_payload:
        description: "CAP JSON payload (paste raw JSON here)"
        required: true
        default: |
          {
            "timestamp": "2025-10-30T00:00:00Z",
            "domain": "Governance",
            "context_mode": "Advisor",
            "ems": 0.78,
            "cw": 0.21,
            "ad": 0.18,
            "hci": 0.77,
            "hs": 0.88,
            "haa": 0.91,
            "er_delta": 0.03,
            "validator_ethics": "compliant",
            "validator_empathy": "aligned",
            "reasoning_summary": "Local CAP validation test run.",
            "laurie_version": "v3.4",
            "governance_chain": {
              "hash_prev": "SHA256:0000000000000000000000000000000000000000000000000000000000000000",
              "hash_next": "SHA256:0000000000000000000000000000000000000000000000000000000000000000"
            },
            "status": "pending"
          }

permissions:
  contents: write
  actions: read

env:
  SCHEMA_PATH: "./schemas/ATHENA_CAP_SCHEMA_v3_4.json"
  LEDGER_PATH: "./CAP_LOGS"
  SCHEMA_VERSION: "v3.4"
  GH_PAT: ${{ secrets.GH_PAT }}
  ZAPIER_WEBHOOK_URL: ${{ secrets.ZAPIER_WEBHOOK_URL }}

jobs:
  validate_and_commit:
    name: Validate CAP Payload ‚Üí Commit ‚Üí Zapier
    runs-on: ubuntu-latest

    steps:
      # Step 1 ‚Äî Checkout
      - name: üß≠ Checkout repository
        uses: actions/checkout@v4

      # Step 2 ‚Äî Write input safely
      - name: üß© Write CAP payload to file
        run: |
          echo '${{ inputs.cap_payload }}' > cap_payload_raw.txt
          if ! jq empty cap_payload_raw.txt; then
            echo "‚ùå Invalid JSON input."
            exit 1
          fi
          jq . cap_payload_raw.txt > cap_payload.json
          echo "‚úÖ CAP payload validated and normalized."

      # Step 3 ‚Äî Debug header
      - name: üß† Print schema header
        run: |
          echo "=== Schema Header Preview ($SCHEMA_PATH) ==="
          head -n 10 $SCHEMA_PATH

      # Step 4 ‚Äî Node setup
      - name: ‚öôÔ∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # Step 5 ‚Äî Validate JSON against CAP schema
      - name: üßÆ Validate CAP JSON (AJV 2020)
        run: |
          cat <<'EOF' > validate.js
          const fs = require('fs');
          const Ajv2020 = require('ajv/dist/2020');
          const addFormats = require('ajv-formats');
          const schema = JSON.parse(fs.readFileSync(process.env.SCHEMA_PATH));
          const data = JSON.parse(fs.readFileSync('cap_payload.json'));
          const ajv = new Ajv2020({ strict: false, allErrors: true });
          addFormats(ajv);
          const validate = ajv.compile(schema);
          const valid = validate(data);
          if (!valid) {
            console.error('‚ùå Validation errors:', validate.errors);
            process.exit(1);
          } else {
            console.log('‚úÖ CAP JSON validated successfully.');
          }
          EOF
          npm install ajv@8 ajv-formats@2
          node validate.js

      # Step 6 ‚Äî Commit to CAP Ledger
      - name: ü™∂ Commit CAP record to Ledger
        run: |
          YEAR=$(date -u +"%Y")
          MONTH=$(date -u +"%m")
          mkdir -p "$LEDGER_PATH/$YEAR/$MONTH"
          UUID=$(jq -r '.cap_id // empty' cap_payload.json)
          FILE="$LEDGER_PATH/$YEAR/$MONTH/${UUID:-cap_record_$(date +%s)}.json"
          cp cap_payload.json "$FILE"
          git config user.name "Athena-Audit-Bot"
          git config user.email "audit-bot@falconforge.ai"
          git add "$FILE"
          git commit -m "Add CAP record: ${UUID:-anonymous} | Schema $SCHEMA_VERSION"
          git push https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }}.git

      # Step 7 ‚Äî Optional: Send to Zapier pipeline (if webhook exists)
      - name: üîó Push CAP event to Zapier (optional)
        if: env.ZAPIER_WEBHOOK_URL != ''
        run: |
          echo "üì° Sending CAP record to Zapier..."
          jq --arg repo "${{ github.repository }}" \
             --arg run_id "${{ github.run_id }}" \
             '. + {repo: $repo, run_id: $run_id, schema_version: env.SCHEMA_VERSION}' cap_payload.json \
             > zap_payload.json
          curl -X POST -H "Content-Type: application/json" \
               -d @zap_payload.json \
               "${{ env.ZAPIER_WEBHOOK_URL }}"
          echo "‚úÖ CAP record dispatched to Zapier."

      # Step 8 ‚Äî Summary Output
      - name: üßæ Output Summary
        run: |
          echo "======================================"
          echo "‚úÖ CAP Record Processed Successfully"
          echo "Repository: ${{ github.repository }}"
          echo "Schema Version: $SCHEMA_VERSION"
          jq '.cap_id, .domain, .status, .reasoning_summary' cap_payload.json
          echo "======================================"
