name: Athena CAP Validation & Ledger Commit (Stable JSON)

on:
  workflow_dispatch:
    inputs:
      cap_payload:
        description: "CAP JSON payload (paste raw JSON here)"
        required: true
        default: |
          {
            "timestamp": "2025-10-30T00:00:00Z",
            "domain": "Governance",
            "context_mode": "Advisor",
            "ems": 0.78,
            "cw": 0.21,
            "ad": 0.18,
            "hci": 0.77,
            "hs": 0.88,
            "haa": 0.91,
            "er_delta": 0.03,
            "validator_ethics": "compliant",
            "validator_empathy": "aligned",
            "reasoning_summary": "Local CAP validation test run.",
            "laurie_version": "v3.4",
            "governance_chain": {
              "hash_prev": "SHA256:0000000000000000000000000000000000000000000000000000000000000000",
              "hash_next": "SHA256:0000000000000000000000000000000000000000000000000000000000000000"
            },
            "status": "pending"
          }

permissions:
  contents: write

env:
  SCHEMA_PATH: "./schemas/ATHENA_CAP_SCHEMA_v3_4.json"
  LEDGER_PATH: "./CAP_LOGS"
  SCHEMA_VERSION: "v3.4"

jobs:
  validate_and_commit:
    name: Validate CAP Payload and Commit to Ledger
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Write CAP payload to file safely
        run: |
          echo "üì¶ Checking CAP payload type..."
          echo '${{ inputs.cap_payload }}' > cap_payload_raw.txt
          echo "üß© Raw CAP payload written to cap_payload_raw.txt"
          cat cap_payload_raw.txt
          # Validate JSON before proceeding
          if ! jq empty cap_payload_raw.txt; then
            echo "‚ùå Invalid JSON in workflow input."
            exit 1
          fi
          jq . cap_payload_raw.txt > cap_payload.json
          echo "‚úÖ JSON validated and normalized to cap_payload.json"
          cat cap_payload.json

      - name: Debug Schema Header
        run: |
          echo "=== Printing first 10 lines of schema file ($SCHEMA_PATH) ==="
          head -n 10 $SCHEMA_PATH

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Validate CAP JSON (AJV 2020)
        run: |
          cat <<'EOF' > validate.js
          const fs = require('fs');
          const Ajv2020 = require('ajv/dist/2020');
          const addFormats = require('ajv-formats');
          const schema = JSON.parse(fs.readFileSync(process.env.SCHEMA_PATH));
          const data = JSON.parse(fs.readFileSync('cap_payload.json'));
          const ajv = new Ajv2020({ strict: false, allErrors: true });
          addFormats(ajv);
          const validate = ajv.compile(schema);
          const valid = validate(data);
          if (!valid) {
            console.error('‚ùå Validation errors:', validate.errors);
            process.exit(1);
          } else {
            console.log('‚úÖ CAP JSON validated successfully.');
          }
          EOF
          npm install ajv@8 ajv-formats@2
          node validate.js

      - name: Commit CAP record (if valid)
        run: |
          YEAR=$(date -u +"%Y")
          MONTH=$(date -u +"%m")
          mkdir -p "$LEDGER_PATH/$YEAR/$MONTH"
          UUID=$(jq -r '.cap_id // empty' cap_payload.json)
          FILE="$LEDGER_PATH/$YEAR/$MONTH/${UUID:-cap_record_$(date +%s)}.json"
          cp cap_payload.json "$FILE"
          git config user.name "Athena-Audit-Bot"
          git config user.email "audit-bot@falconforge.ai"
          git add "$FILE"
          git commit -m "Add CAP record: ${UUID:-anonymous}"
          git push https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }}.git

      - name: Output summary
        run: |
          echo "‚úÖ CAP record processed successfully."
          jq '.cap_id, .status, .reasoning_summary' cap_payload.json
