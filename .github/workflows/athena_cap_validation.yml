name: Athena CAP Validation & Ledger Commit

on:
  workflow_dispatch:
    inputs:
      cap_payload:
        description: "CAP JSON payload (paste object here; quotes optional)"
        required: true
        default: |
          {
            "cap_id": "test-001",
            "timestamp": "2025-10-29T00:00:00Z",
            "domain": "Governance",
            "context_mode": "Advisor",
            "hs": 0.88,
            "hci": 0.74,
            "haa": 0.91,
            "reasoning_summary": "Manual CAP validation test via UI.",
            "status": "pending"
          }
  repository_dispatch:
    types: [cap_validation, hic_validation, humanization_pass, whitepaper_release]

permissions:
  contents: write

env:
  SCHEMA_PATH: "./schemas/ATHENA_CAP_SCHEMA_v3_4.json"
  LEDGER_PATH: "./CAP_LOGS"
  SCHEMA_VERSION: "v3.4"

jobs:
  validate_and_commit:
    name: Validate CAP Payload and Commit to Ledger
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare CAP_LOGS directory
        run: mkdir -p $LEDGER_PATH

      # ----------------------------------------------------------------
      # Normalize CAP payload (auto-fix malformed GitHub workflow input)
      # ----------------------------------------------------------------
      - name: Normalize CAP payload
        run: |
          echo "${{ github.event.inputs.cap_payload }}" > raw_payload.txt
          cat <<'EOF' > normalize.js
          const fs = require('fs');
          let text = fs.readFileSync('raw_payload.txt','utf8').trim();
          try {
            // Try direct JSON parse
            JSON.parse(text);
            fs.writeFileSync('cap_payload.json', text);
          } catch {
            // Attempt to repair if GitHub stripped quotes
            try {
              const repaired = text
                .replace(/^'+|'+$/g,'')
                .replace(/([{,]\s*)([A-Za-z0-9_]+)\s*:/g,'$1"$2":')
                .replace(/:\s*([A-Za-z0-9_.:-]+)(\s*[},])/g,':"$1"$2');
              JSON.parse(repaired);
              fs.writeFileSync('cap_payload.json', repaired);
              console.log('Repaired and normalized payload.');
            } catch (err) {
              console.error('‚ùå Failed to normalize CAP payload:', err.message);
              fs.writeFileSync('cap_payload.json', '{}');
              console.log('Fallback: wrote empty object.');
            }
          }
          EOF
          node normalize.js
          echo "=== CAP payload written ==="
          ls -l cap_payload.json || echo "‚ö†Ô∏è cap_payload.json missing!"
          cat cap_payload.json

      # ----------------------------------------------------------------
      # Schema debug & Node setup
      # ----------------------------------------------------------------
      - name: Debug Schema Header
        run: |
          echo "=== Printing first 10 lines of schema file ($SCHEMA_PATH) ==="
          head -n 10 $SCHEMA_PATH

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # ----------------------------------------------------------------
      # AJV schema validation
      # ----------------------------------------------------------------
      - name: Validate CAP JSON (Node/AJV 2020)
        id: schema_check
        run: |
          cat <<'EOF' > validate.js
          const fs = require('fs');
          const Ajv2020 = require('ajv/dist/2020');
          const addFormats = require('ajv-formats');
          const schema = JSON.parse(fs.readFileSync(process.env.SCHEMA_PATH));
          const data = JSON.parse(fs.readFileSync('cap_payload.json'));
          const ajv = new Ajv2020({ strict: false, allErrors: true });
          addFormats(ajv);
          const validate = ajv.compile(schema);
          const valid = validate(data);
          if (!valid) {
            console.error('‚ùå Validation errors:', validate.errors);
            process.exit(1);
          } else {
            console.log('‚úÖ CAP JSON validated successfully.');
          }
          EOF
          npm install ajv@8 ajv-formats@2
          node validate.js
        continue-on-error: false

      # ----------------------------------------------------------------
      # Generate CAP file & hash
      # ----------------------------------------------------------------
      - name: Generate CAP filename and hash
        id: hash_gen
        run: |
          TIMESTAMP=$(jq -r '.timestamp' cap_payload.json | tr -d '":')
          CAP_ID=$(jq -r '.cap_id' cap_payload.json)
          DOMAIN=$(jq -r '.domain' cap_payload.json | tr '[:upper:]' '[:lower:]')
          YEAR=$(date -u +"%Y")
          MONTH=$(date -u +"%m")
          FILEPATH="$LEDGER_PATH/$YEAR/$MONTH/${DOMAIN}_${CAP_ID}.json"
          mkdir -p $(dirname "$FILEPATH")
          SHA256=$(sha256sum cap_payload.json | awk '{print $1}')
          echo "file=$FILEPATH" >> $GITHUB_OUTPUT
          echo "hash=$SHA256" >> $GITHUB_OUTPUT
          echo "Generated hash: $SHA256"

      # ----------------------------------------------------------------
      # Link previous CAP hash for ledger continuity
      # ----------------------------------------------------------------
      - name: Link previous CAP hash
        run: |
          PREV_HASH=$(grep -m1 -h 'SHA256:' $(find $LEDGER_PATH -type f | sort | tail -n 1) 2>/dev/null || echo "SHA256:NULL")
          jq --arg prev "$PREV_HASH" '.governance_chain.hash_prev = $prev' cap_payload.json > cap_final.json
          mv cap_final.json cap_payload.json

      # ----------------------------------------------------------------
      # Commit CAP record to ledger (GitHub acts as canonical audit log)
      # ----------------------------------------------------------------
      - name: Commit CAP record to ledger
        run: |
          FILE=${{ steps.hash_gen.outputs.file }}
          mkdir -p $(dirname "$FILE")
          cp cap_payload.json "$FILE"
          git config user.name "Athena-Audit-Bot"
          git config user.email "audit-bot@falconforge.ai"
          git add "$FILE"
          git commit -m "Add CAP record: ${{ github.event.inputs.cap_payload.cap_id }} [${{ steps.hash_gen.outputs.hash }}]" || echo "No changes to commit"
          git push https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }}.git

      # ----------------------------------------------------------------
      # Optional: Zapier / Notion bridge (for Humanization dashboard)
      # ----------------------------------------------------------------
      - name: Send summary to Zapier (Notion Bridge)
        if: ${{ always() }}
        env:
          ZAPIER_WEBHOOK_URL: ${{ secrets.ZAPIER_WEBHOOK_URL }}
        run: |
          if [ ! -f cap_payload.json ]; then
            echo "‚ö†Ô∏è cap_payload.json not found, creating fallback empty object."
            echo '{}' > cap_payload.json
          fi

          SUMMARY=$(jq -r '.reasoning_summary // "N/A"' cap_payload.json)
          DOMAIN=$(jq -r '.domain // "unknown"' cap_payload.json)
          STATUS=$(jq -r '.status // "undefined"' cap_payload.json)
          CAP_ID=$(jq -r '.cap_id // "undefined"' cap_payload.json)
          HCI=$(jq -r '.hci // 0' cap_payload.json)
          HS=$(jq -r '.hs // 0' cap_payload.json)
          HAA=$(jq -r '.haa // 0' cap_payload.json)
          TIMESTAMP=$(jq -r '.timestamp // "unknown"' cap_payload.json)
          HASH=${{ steps.hash_gen.outputs.hash }}

          if [ -n "$ZAPIER_WEBHOOK_URL" ]; then
            echo "üì° Dispatching CAP event to Zapier ‚Üí Notion..."
            curl -X POST "$ZAPIER_WEBHOOK_URL" \
              -H "Content-Type: application/json" \
              -d "{
                \"cap_id\": \"$CAP_ID\",
                \"domain\": \"$DOMAIN\",
                \"status\": \"$STATUS\",
                \"hci\": $HCI,
                \"hs\": $HS,
                \"haa\": $HAA,
                \"schema_version\": \"$SCHEMA_VERSION\",
                \"summary\": \"$SUMMARY\",
                \"record_hash\": \"$HASH\",
                \"timestamp\": \"$TIMESTAMP\"
              }"
          else
            echo "‚ö†Ô∏è No Zapier webhook URL found. Skipping Notion sync."
          fi

      # ----------------------------------------------------------------
      # Summary output
      # ----------------------------------------------------------------
      - name: Output validation summary
        run: |
          echo "‚úÖ CAP record committed successfully."
          echo "Schema Version: $SCHEMA_VERSION"
          echo "Record Hash: ${{ steps.hash_gen.outputs.hash }}"
